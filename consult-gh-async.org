
* Consult-GH.el
:PROPERTIES:
:header-args:emacs-lisp: :results none :mkdirp yes :link yes :tangle ./consult-gh.el
:END:
** Header
#+begin_src emacs-lisp
;;; consult-gh.el --- Consulting GitHub Client -*- lexical-binding: t -*-

;; Copyright (C) 2023 Armin Darvish

;; Author: Armin Darvish
;; Maintainer: Armin Darvish
;; Created: 2023
;; Version: 0.11
;; Package-Requires: ((emacs "27.1") (consult "0.34") (gh "2.29"))
;; Homepage: https://github.com/armindarvish/consult-gh
;; Keywords: convenience, matching, tools, vc

;;; Commentary:

;;; Code:

#+end_src

** Requirements
#+begin_src emacs-lisp
;;; Requirements

(eval-when-compile
(require 'consult)
(require 'json)
)

(require 'crm)

#+end_src

** Define Group, Customs, Vars, etc.
*** Group
#+begin_src emacs-lisp
;;; Group

(defgroup consult-gh nil
  "Consulting GitHub CLI"
  :group 'convenience
  :group 'minibuffer
  :group 'consult
  :group 'magit
  :prefix "consult-gh-")
#+end_src

*** Custom Variables
#+begin_src emacs-lisp
;;; Customization Variables

(defcustom consult-gh-use-async t
  "If non-nil `consult-gh' will use consult--async functionality to dynamically fetch results form an asynchroneous process calling `consult-gh-args' in the command line."
  :group 'consult-gh
  :type 'boolean)

(defcustom consult-gh-args '("gh")
  "Command line arguments to call GitHub CLI used by `consult-gh-async'.
The dynamically computed arguments are appended.
Can be either a string, or a list of strings or expressions."
  :group 'consult-gh
  :type '(choice string (repeat (choice string sexp))))

(defcustom consult-gh-tempdir (expand-file-name "consult-gh" temporary-file-directory)
  "Temporary file directory for the `consult-gh' package. This directory is used for storing temporary files when pulling files for viewing"
  :group 'consult-gh
  :type 'string
  )

(defcustom consult-gh-crm-separator crm-separator
  "Separator for multiple selections with completing-read-multiple. for more info see `crm-separator'. Uses crm-separator for default."
  :group 'consult-gh
  :type 'string)

(defcustom consult-gh-repo-maxnum 30
  "Maximum number of output for showing repos with gh list and search operations normally passed to \"--limit\" in the command line. The default is set to gh's default number which is 30"
  :group 'consult-gh
  :type 'integer)

(defcustom consult-gh-issue-maxnum 30
  "Maximum number of output for gh issue list and search operations normally passed to \"--limit\" in the command line. The default is set to gh's default number which is 30"
  :group 'consult-gh
  :type 'integer)

(defcustom consult-gh-issues-state-to-show "open"
  "The state of issues that will be listed by `consult-gh-issue-list' functions. This is what is passed to \"--state\" argument in the command line when runing `gh issue list`. The possible options are \"open\", \"closed\" or\"all\". The default value is, \"open\", the same s `gh` default value."
  :group 'consult-gh
  :type '(choice "open" "closed" "all"))

(defcustom consult-gh-large-file-warning-threshold large-file-warning-threshold
  "Maximum size of file above which `consult-gh' requests a confirmation for previewing, opening or saving the file. Default value is set by `large-file-warning-threshold'."
  :group 'consult-gh
  :type '(choice integer (const :tag "Never request confirmation" nil)))

(defcustom consult-gh-prioritize-local-folder nil
  "This varibale defines how `gh` selects repositories and it can either be the symbol 'suggest or a boolean.
If it is set to 'suggest, consult-gh uses the git repository from the local folder (a.k.a. `default-directory'), if any, as the initial-input value for commands such as `consult-gh-issue-list' or `consult-gh-find-file'. The user can still change the entry but this allows quickly selecting the current repo by just hitting return saving a few keystrokes.
If it is set to t, consult-gh uses the git repository from the local folder (a.k.a. `default-directory'), if any, instead of querying the user. If there is no GitHub repository in the current folder, it falls back on querying the user.
If it is set to nil, consult-gh always queries the user for name of repo but instead of suggesting the GitHub repository from the local folder (a.k.a. `default-directory') as initial-input, it adds that to  to the end of history (default keybinding `M-n`)."
  :group 'consult-gh
  :type '(choice boolean (symbol 'suggest)))

(defcustom consult-gh-preview-buffer-mode 'markdown-mode
  "Major mode to show README of repositories in preview. choices are 'markdown-mode or 'org-mode"
  :group 'consult-gh
  :type 'symbol)

(defcustom consult-gh-default-orgs-list (list)
  "List of default github orgs. A good choice would be to add personal accounts or frequently visited github accounts to this list"
  :group 'consult-gh
  :type 'list)

(defcustom consult-gh-preview-buffer-name "*consult-gh-preview*"
  "Default name to use for preview buffers showing repo readmes retrieved by \"gh repo view\"."
  :group 'consult-gh
  :type 'string)

(defcustom consult-gh-show-preview nil
  "This variable determines whether `consult-gh' shows previews. It turns previews on/off globally for all categories: repos, issues, files."
  :group 'consult-gh
  :type 'boolean)

(defcustom consult-gh-preview-key consult-preview-key
  "Preview key for consult-gh. This is similar `consult-preview-key' but explicitly for consult-gh and it is used by all categories: repos, issues, files in consult-gh. Commands that use this include `consult-gh-orgs', `consult-gh-search-repos', `consult-gh-issue-list',`consult-gh-find-file', and etc."
  :type '(choice (const :tag "Any key" any)
                 (list :tag "Debounced"
                       (const :debounce)
                       (float :tag "Seconds" 0.1)
                       (const any))
                 (const :tag "No preview" nil)
                 (key :tag "Key")
                 (repeat :tag "List of keys" key)))

(defcustom consult-gh-default-clone-directory "~/"
  "Default directory to clone github repos used by `consult-gh-repo-clone' and `consult-gh--repo-clone-action'."
  :group 'consult-gh
  :type 'string)

(defcustom consult-gh-default-save-directory "~/Downloads/"
  "Default directory to save files pulled from github (for single files and not cloning repositories) used by `consult-gh--files-save-file-action'."
  :group 'consult-gh
  :type 'string)

(defcustom consult-gh-confirm-before-clone t
  "This variable defines whether `consult-gh' queries the user for a path and a name before cloning a repo or uses the default directory and package name. It's useful to set this to nil when cloning multiple repos all at once frequently."
  :group 'consult-gh
  :type 'boolean)

(defcustom consult-gh-confirm-name-before-fork nil
  "This variable defines whether `consult-gh' queries the user for a name before forking a repo or uses the default repo name. By default it is set to nil."
  :group 'consult-gh
  :type 'boolean)

(defcustom consult-gh-ask-for-path-before-save t
  "This variable defines whether `consult-gh' queries the user for a path before saving a file or uses the default directory and `buffer-file-name'. It may be useful to set this to nil if saving multiple files all at once frequently."
  :group 'consult-gh
  :type 'boolean)

(defcustom consult-gh-default-branch-to-load "ask"
  "This determines how `consult-gh' loads repository branches. Possible Values are:
\"confirm\": Ask for confirmation if \"HEAD\" branch should be loaded. If the nswer is no, then the user gets to chose a different branch.
\"ask\": Asks the user to select a branch.
'nil: loads the \"HEAD\" branch
A STRING: loads the branch STRING.
,*Note that setting this to a STRING would mean that this STRING is used for any repository that is fetched with `consult-gh' and if the branch does not exist, it will cause an error. Therefore using a STRING is not recommended as a general case but in temporary settings where one is sure the branch exists on the repositories being fetched.*"
  :group 'consult-gh
  :type '(choice "confirm" "ask" string (const nil)))

(defcustom consult-gh-repo-action #'consult-gh--repo-browse-url-action
  "This variable defines the function that is used when selecting a repo. By default it is bound to `consult-gh--repo-browse-url-action', but can be changed to other actions such as `Consult-gh--repo-browse-files-action', `consult-gh--repo-view-action' `consult-gh--repo-clone-action', `consult-gh--repo-fork-action' or any other user-defined function that follows patterns similar to those."
  :group 'consult-gh
  :type 'function)

(defcustom consult-gh-issue-action #'consult-gh--issue-browse-url-action
  "This variable defines the function that is used when selecting an issue. By default it is bound to `consult-gh--issue-browse-url-action', but can be changed to other actions such as `consult-gh--issue-view-action' or similar user-defined custom actions."
  :group 'consult-gh
  :type 'function)

(defcustom consult-gh-file-action #'consult-gh--files-browse-url-action
  "This variable defines the function that is used when selecting a file. By default it is bound to `consult-gh--browse-files-url-action',but can be changed to other actions such as `consult-gh--files-view-action', `consult-gh--files-save-file-action', or similar user-defined custom actions"
  :group 'consult-gh
  :type 'function)
#+end_src

*** Other Variables
#+begin_src emacs-lisp
;;; Other Variables
(defvar consult-gh-category 'consult-gh
  "Category symbol for the `consult-gh' package.")

(defvar consult-gh-repos-category 'consult-gh-repos
  "Category symbol for repos in `consult-gh' package.")

(defvar consult-gh-issues-category 'consult-gh-issues
  "Category symbol for issues in `consult-gh' package.")

(defvar consult-gh-orgs-category 'consult-gh-orgs
  "Category symbol for orgs in `consult-gh' package.")

(defvar consult-gh-files-category 'consult-gh-files
  "Category symbol for the `consult-gh' package.")

(defvar consult-gh--preview-buffers-list (list)
  "List of currently open preview buffers")

(defvar consult-gh--repos-history nil
  "History variable for repos used in `consult-gh-search-repos'.")

(defvar consult-gh--org-history nil
  "History variable for orgs used in  `consult-gh-orgs' .")

(defvar consult-gh--issues-history nil
  "History variable for isseus used in  `consult-gh-search-issues' .")

(defvar consult-gh--known-orgs-list nil
  "List of previously visited orgs by `consult-gh-orgs'.")

(defvar consult-gh--known-repos-list nil
  "List of previously visited repos for `consult-gh-search-repos'.")
#+end_src

** Define faces
#+begin_src emacs-lisp
;;; Faces
(defface consult-gh-default-face
  `((t :inherit 'default)) "default face used for listing items in minibuffer by `consult-gh'.")
(defface consult-gh-package-face
  `((t :inherit 'default)) "default face used for listing items in minibuffer by `consult-gh'.")
(defface consult-gh-visibility-face
  `((t :inherit 'font-lock-warning-face)) "the face for repository visibility annotation in minibuffer by `consult-gh'. by default inherits from font-lock-variable-face")
(defface consult-gh-user-face
  `((t :inherit 'font-lock-constant-face)) "the face for user annotation in minibuffer by `consult-gh'. by default inherits from font-lock-warning-face")
(defface consult-gh-date-face
  `((t :inherit 'font-lock-keyword-face)) "the face for date annotation in minibuffer by `consult-gh'. by default inherits from font-lock-keyword-face")
(defface consult-gh-tags-face
  `((t :inherit 'font-lock-comment-face)) "the face for tags/comments annotation in minibuffer by `consult-gh'. by default inherits from font-lock-comment-face")
(defface consult-gh-description-face
  `((t :inherit 'font-lock-builtin-face)) "the face for repo description annotation in minibuffer by `consult-gh'. by default inherits from font-lock-builtin-face")
#+end_src

** Async calls to =gh=
#+begin_src emacs-lisp

(defun consult-gh--set-string-width (string width)
  (let* ((string (format "%s" string))
         (w (string-width string)))
    (when (< w width)
      (setq string (format "%s%s" (substring string) (make-string (- width w) ?\s))))
    (when (> w width)
      (setq string (format "%s..." (substring string 0 (- width (+ w 3))))))
    string))

(defun consult-gh--highlight-match (regexp str ignore-case)
    (let ((i 0))
      (while (and (let ((case-fold-search ignore-case))
                    (string-match regexp str i))
                  (> (match-end 0) i))
    (let ((m (match-data)))
          (setq i (cadr m) m (or (cddr m) m))
          (while m
            (when (car m)
              (add-face-text-property (car m) (cadr m)
                                      'consult-highlight-match nil str))
            (setq m (cddr m))))))
    str)


(defun consult-gh--async-lookup ()
  (lambda (sel cands &rest args)
    (assoc sel cands)))

(defun consult-gh--async-state ()
  (lambda (action cand)
    (let* ((preview (consult--buffer-preview))
           )
      (if cand
          (pcase action
            ('preview
             )
            ('return
             cand)
             )))
      ))
(defun consult-gh--builder ()
(lambda (input) "Build find command line, finding across PATHS."
  (pcase-let*
      ((cmd (consult--build-args consult-gh-args))
       (`(,arg \, opts) (consult--command-split input))
       (flags (append cmd opts)))
    (unless (or (member "-L" flags) (member "--limit" flags))
      (cond
       ((and (member "search" flags) (member "repos" flags))
        (setq opts
              (append opts
                      (list "-L" (format "%s" consult-gh-repo-maxnum)))))
       ((and (member "search" flags) (member "issues" flags))
        (setq opts
              (append opts
                      (list "-L" (format "%s" consult-gh-issue-maxnum)))))))
    (pcase-let*
        ((`(,re \, hl) (funcall consult--regexp-compiler arg 'emacs t)))
      (when re
        (cons
         (append cmd (list (consult--join-regexps re 'emacs)) opts) hl))))))


(defun consult-gh--async (prompt builder initial category)
  (consult--read
   (consult--async-command builder
     ;; (consult--async-highlight builder)
     ;; (consult--async-map (lambda (x) (consult-gh--async-highlight-match x)))
     ;;(consult--async-map (lambda (x) (consult-gh--async-format-repo x)))
     ;; ;;(consult--grep-format builder)
     ;;(consult--async-transform consult-gh--async-format-repo)
     )
   :prompt prompt
   :lookup (consult-gh--async-info-lookup)
   :state (funcall #'consult-gh--async-state)
   :initial (consult--async-split-initial initial)
   ;;:group #'consult-gh--repo-group
   :add-history (consult--async-split-thingatpt 'symbol)
   :require-match t
   :category (make-symbol (concat "consult-gh-" category))
   :sort nil))

(defun consult-gh-async (&optional arg1 arg2 initial &rest args)
  (interactive "P")
   (let* ((arg1 (or arg1 (completing-read "Select Action: " '("repo" "issues" "search"))))
         (arg2 (or arg2 (if (equal arg1 "search") (completing-read "Select Target: " '("repos" "issues")) nil)))
         ;; (rest_args (if rest_args (if (listp rest_args) rest_args (list rest_args)) nil))
         (initial (or initial nil))
         (consult-gh-args (append consult-gh-args (list arg1 arg2)))
         )
     (consult-gh--async "Search Repo:  " #'consult-gh--async-make-builder initial arg1))
  )
#+end_src


** Backend Functions

*** issue
***** lookup
#+begin_src emacs-lisp
(defun consult-gh--issue-list-lookup ()
  (lambda (sel cands &rest args)
    (let* ((info (cdr (assoc sel cands)))
           (title (plist-get info :title))
           (issue (plist-get info :issue)))
    (cons (format "%s:%s" issue title) info))))
#+end_src

***** state
#+begin_src emacs-lisp
(defun consult-gh--issue-list-state ()
  (lambda (action cand)
    (let* ((preview (consult--buffer-preview))
           )
      (if cand
          (pcase action
            ('preview
             )
            ('return
             cand)
             )))
      ))
#+end_src

***** format
#+begin_src emacs-lisp
;; (defun consult-gh--issue-list-format (string)
;;   (let* ((parts (string-split string "\t"))
;;          ;;(repo (format "%s" (plist-get builder "--repo")))
;;          ;(user (car (string-split repo "\/")))
;;          ;(package (cadr (string-split repo "\/")))
;;          (issue (car parts))
;;          (state (cadr parts))
;;          (title (cadr (cdr parts)))
;;          (tags (cadr (cdr (cdr parts))))
;;          (date (cadr (cdr (cdr (cdr parts)))))
;;          )
;;     (print (format "%s" parts))
;;     (cons (format "%s\s%s\s%s\s%s"
;;                   (consult-gh--set-string-width (concat (propertize (format "%s" issue) 'face 'consult-gh-visibility-face) ":" (propertize (format "%s" title) 'face 'consult-gh-default-face)) 80)
;;                   (propertize (consult-gh--set-string-width state 8) 'face 'consult-gh-description-face)
;;                   ;;(consult-gh--set-string-width (concat (propertize user 'face 'consult-gh-user-face ) "/" (propertize package 'face 'consult-gh-package-face)) 40)
;;                   (propertize (consult-gh--set-string-width tags 24) 'face 'consult-gh-tags-face)
;;                   (propertize (consult-gh--set-string-width date 18) 'face 'consult-gh-date-face)) (list :issue issue :state state :title title :date date))))

(defun consult-gh--issue-list-format (string repo)
  (let* ((parts (string-split string "\t"))
         (user (car (string-split repo "\/")))
         (package (cadr (string-split repo "\/")))
         (issue (car parts))
         (state (cadr parts))
         (title (cadr (cdr parts)))
         (tags (cadr (cdr (cdr parts))))
         (date (cadr (cdr (cdr (cdr parts)))))
         (str (format "%s\s\s%s\s\s%s\s\s%s\s\s%s"
                  (consult-gh--set-string-width (concat (propertize (format "%s" issue) 'face 'consult-gh-visibility-face) ":" (propertize (format "%s" title) 'face 'consult-gh-default-face)) 70)
                  (propertize (consult-gh--set-string-width state 8) 'face 'consult-gh-description-face)
                  (propertize (consult-gh--set-string-width date 18) 'face 'consult-gh-date-face)
                  (propertize (consult-gh--set-string-width tags 24) 'face 'consult-gh-tags-face)
                  (consult-gh--set-string-width (concat (propertize user 'face 'consult-gh-user-face ) "/" (propertize package 'face 'consult-gh-package-face)) 40)))
         (str (consult-gh--highlight-match repo str t))
         )
    (cons str (list :repo repo :user user :package package :issue issue :state state :title title :date date))))

(defun consult-gh--issue-list-transform (async builder)
  "Return ASYNC function highlighting grep match results.
BUILDER is the command line builder function."
  (let (input)
    `(lambda (action)
      (cond
       ((stringp action)
        (setq input action)
        (funcall ,async action))
       (t (mapcar (lambda (string)
          (consult-gh--issue-list-format string input))
        (funcall ,async action)))
       ))))
#+end_src

***** group
#+begin_src emacs-lisp
(defun consult-gh--issue-list-group (cand transform)
"Grouping function for the list of items in `consult-gh-issue-list'. It groups issues by the status of the issue e.g. \"Open\"."
(let ((name (replace-regexp-in-string " " "" (format "%s" (cadr (remove " " (remove "" (string-split (substring-no-properties cand) "\s\s"))))))))
  (if transform (substring cand) name)))
#+end_src



***** builder
#+begin_src emacs-lisp
(defun consult-gh--issue-list-builder (repo)
  "Build gh command line for searching issues from the input string"
  (pcase-let* ((consult-gh-args `("gh" "issue" "list" "--repo"))
               (cmd (consult--build-args consult-gh-args))
               (`(,arg . ,opts) (consult--command-split repo))
               (flags (append cmd opts)))
    (unless (or (member "-L" flags) (member "--limit" flags))
                        (setq opts (append opts (list "--limit" (format "%s" consult-gh-issue-maxnum)))))
    (unless (or (member "-s" flags) (member "--state" flags))
                        (setq opts (append opts (list "--state" (format "%s" consult-gh-issues-state-to-show)))))
    (pcase-let* ((`(,re . ,hl) (funcall consult--regexp-compiler arg 'emacs t)))
      (when re
        (cons (append cmd
                      (list (consult--join-regexps re 'emacs))
                      opts)
              hl)))))


#+end_src


***** async call
#+begin_src emacs-lisp
(defun consult-gh--issue-list (prompt builder &optional initial category)
  (consult--read
   (consult--async-command builder
     (consult-gh--issue-list-transform builder)
       )
   :prompt prompt
   :lookup (consult-gh--issue-list-lookup)
   :state (funcall #'consult-gh--issue-list-state)
   :initial (consult--async-split-initial initial)
   :group #'consult-gh--issue-list-group
   :add-history (consult--async-split-thingatpt 'symbol)
   :require-match t
   :category (make-symbol (concat "consult-gh-" category))
   :sort nil))
#+end_src

***** Interactive command (consult-gh-issue-list)
#+begin_src emacs-lisp
(defun consult-gh-issue-list (&optional initial)
  "Runs the interactive command in the minibuffer that queries the user for name of repos in the format `OWNER/REPO` e.g. armindarvish/consult-gh as well as a string as search term and returns the list of searhc matches for the string in issues of thae repos for further actions such as viewing in emacs or the browser.
The user can provide multiple repos by using the `consult-gh-crm-separator' similar to how `crm-separator' works in `completing-read-multiple'. Under the hood this command is using `consult' and particularly `consult--multi', which in turn runs macros of `completing-read' and passes the results to the GitHub command-line tool `gh` (e.g. by runing `gh search issues string --repo name-of-the-repo`) to search the issues for particular repositories and shows them back to the user.
It uses `consult-gh--make-source-from-search-issues' to create the list of items for consult and saves the history in `consult-gh--issues-history'. It also keep tracks of previously selected repos by the user in `consult-gh--known-repos-list' and offers them as possible entries in future runs of `consult-gh-search-issues'."
  (interactive)
  (if current-prefix-arg
      (let* ((initial (or initial (format "%s" (car (consult-gh-search-repos initial))))))
        (consult-gh--issue-list "Enter Repo Name:  " #'consult-gh--issue-list-builder initial "issue"))
      (consult-gh--issue-list "Enter Repo Name:  " #'consult-gh--issue-list-builder initial "issue")))
#+end_src





*** search

**** repos

***** lookup
#+begin_src emacs-lisp
(defun consult-gh--search-repos-lookup ()
  (lambda (sel cands &rest args)
    (let* ((info (cdr (assoc sel cands)))
           (repo (plist-get info :repo)))
    (cons repo info))))
#+end_src

***** state
#+begin_src emacs-lisp
(defun consult-gh--search-repos-state ()
  (lambda (action cand)
    (let* ((preview (consult--buffer-preview))
           )
      (if cand
          (pcase action
            ('preview
             )
            ('return
             cand)
             )))
      ))
#+end_src

***** format
#+begin_src emacs-lisp
(defun consult-gh--search-repos-format (string input)
  (let* ((parts (string-split string "\t"))
         (repo (car parts))
         (user (car (string-split repo "\/")))
         (package (cadr (string-split repo "\/")))
         (description (cadr parts))
         (visibility (cadr (cdr parts)))
         (date (cadr (cdr (cdr parts))))
         (str (format "%s\s%s\s%s\s%s"
                  (consult-gh--set-string-width (concat (propertize user 'face 'consult-gh-user-face ) "/" (propertize package 'face 'consult-gh-package-face)) 40)
                  (propertize (consult-gh--set-string-width visibility 16) 'face 'consult-gh-visibility-face)
                  (propertize (consult-gh--set-string-width date 20) 'face 'consult-gh-date-face)
                  (propertize (consult-gh--set-string-width description 100) 'face 'consult-gh-description-face)))
         (str (consult-gh--highlight-match input str t))
         )
    (cons str (list :repo repo :user user :package package :date date :description description :visibility visibility))))

(defun consult-gh--search-repos-transform (async builder)
  "Return ASYNC function highlighting grep match results.
BUILDER is the command line builder function."
  (let (input)
    `(lambda (action)
      (cond
       ((stringp action)
        (setq input action)
        (funcall ,async action))
       (t (mapcar (lambda (string)
          (consult-gh--search-repos-format string input))
        (funcall ,async action)))
       ))))
#+end_src


***** group
#+begin_src emacs-lisp
(defun consult-gh--search-repos-group (cand transform)
"Grouping function for the list of items in `consult-gh-issue-list'. It groups issues by the status of the issue e.g. \"Open\"."
(let ((name (car (remove " " (remove "" (string-split (substring-no-properties cand) "\s\s"))))))
  (if transform (substring cand) name)))
#+end_src


***** builder
#+begin_src emacs-lisp
(defun consult-gh--search-repos-builder (input)
  "Build gh command line for searching issues from the input string"
  (pcase-let* ((consult-gh-args '("gh" "search" "repos"))
               (cmd (consult--build-args consult-gh-args))
               (`(,arg . ,opts) (consult--command-split input))
               (flags (append cmd opts)))
    (unless (or (member "-L" flags) (member "--limit" flags))
                        (setq opts (append opts (list "--limit" (format "%s" consult-gh-issue-maxnum)))))
    (pcase-let* ((`(,re . ,hl) (funcall consult--regexp-compiler arg 'emacs t)))
      (when re
        (cons (append cmd
                      (list (consult--join-regexps re 'emacs))
                      opts)
              hl)))))
#+end_src


***** async call
#+begin_src emacs-lisp
(defun consult-gh--search-repos (prompt builder &optional initial category)
  (consult--read
   (consult--async-command builder
     ;;(consult--async-map (lambda (x) (consult-gh--search-issues-format x)))
     (consult-gh--search-repos-transform builder)
     ;; (consult--async-highlight builder)
     ;; (consult--async-map (lambda (x) (consult-gh--async-highlight-match x)))
     ;;(consult--async-map (lambda (x) (consult-gh--async-format-repo x)))
     ;; ;;(consult--grep-format builder)
     ;;(consult--async-transform consult-gh--async-format-repo)
     )
   :prompt prompt
   :lookup (consult-gh--search-repos-lookup)
   :state (funcall #'consult-gh--search-repos-state)
   :initial (consult--async-split-initial initial)
   :group #'consult-gh--search-repos-group
   :add-history (consult--async-split-thingatpt 'symbol)
   :require-match t
   :category (make-symbol (concat "consult-gh-" category))
   :sort nil))

#+end_src

***** Interactive command (consult-gh-search-issues)
#+begin_src emacs-lisp
(defun consult-gh-search-repos (&optional initial)
  "Runs the interactive command in the minibuffer that queries the user for name of repos in the format `OWNER/REPO` e.g. armindarvish/consult-gh as well as a string as search term and returns the list of searhc matches for the string in issues of thae repos for further actions such as viewing in emacs or the browser.
The user can provide multiple repos by using the `consult-gh-crm-separator' similar to how `crm-separator' works in `completing-read-multiple'. Under the hood this command is using `consult' and particularly `consult--multi', which in turn runs macros of `completing-read' and passes the results to the GitHub command-line tool `gh` (e.g. by runing `gh search issues string --repo name-of-the-repo`) to search the issues for particular repositories and shows them back to the user.
It uses `consult-gh--make-source-from-search-issues' to create the list of items for consult and saves the history in `consult-gh--issues-history'. It also keep tracks of previously selected repos by the user in `consult-gh--known-repos-list' and offers them as possible entries in future runs of `consult-gh-search-issues'."
  (interactive)
  (consult-gh--search-repos "Search Repos:  " #'consult-gh--search-repos-builder initial "repos"))
#+end_src

**** issues
***** lookup
#+begin_src emacs-lisp
(defun consult-gh--search-issues-lookup ()
  (lambda (sel cands &rest args)
    (let* ((info (cdr (assoc sel cands)))
           (title (plist-get info :title))
           (issue (plist-get info :issue)))
    (cons (format "%s:%s" issue title) info))))
#+end_src

***** state
#+begin_src emacs-lisp
(defun consult-gh--search-issues-state ()
  (lambda (action cand)
    (let* ((preview (consult--buffer-preview))
           )
      (if cand
          (pcase action
            ('preview
             )
            ('return
             cand)
             )))
      ))
#+end_src

***** format
#+begin_src emacs-lisp
(defun consult-gh--highlight-match (regexp str ignore-case)
    (let ((i 0))
      (while (and (let ((case-fold-search ignore-case))
                    (string-match regexp str i))
                  (> (match-end 0) i))
    (let ((m (match-data)))
          (setq i (cadr m) m (or (cddr m) m))
          (while m
            (when (car m)
              (add-face-text-property (car m) (cadr m)
                                      'consult-highlight-match nil str))
            (setq m (cddr m))))))
    str)

(defun consult-gh--search-issues-format (string input)
  (let* ((parts (string-split string "\t"))
         (repo (car parts))
         (user (car (string-split repo "\/")))
         (package (cadr (string-split repo "\/")))
         (issue (cadr parts))
         (status (cadr (cdr parts)))
         (title (cadr (cdr (cdr parts))))
         (tags (cadr (cdr (cdr (cdr parts)))))
         (date (cadr (cdr (cdr (cdr (cdr parts))))))
         (str (format "%s\s\s%s\s\s%s\s\s%s\s\s%s"
                  (consult-gh--set-string-width (concat (propertize (format "%s" issue) 'face 'consult-gh-visibility-face) ":" (propertize (format "%s" title) 'face 'consult-gh-default-face)) 80)
                  (propertize (consult-gh--set-string-width status 8) 'face 'consult-gh-description-face)
                  (propertize (consult-gh--set-string-width date 20) 'face 'consult-gh-date-face)
                 (propertize (consult-gh--set-string-width tags 24) 'face 'consult-gh-tags-face)
                 (consult-gh--set-string-width (concat (propertize user 'face 'consult-gh-user-face ) "/" (propertize package 'face 'consult-gh-package-face)) 40)
                  ))
         (str (consult-gh--highlight-match input str t))
         )
    (cons str  (list :repo repo :user user :issue issue :status status :title title :date date))))

(defun consult-gh--search-issues-transform (async builder)
  "Return ASYNC function highlighting grep match results.
BUILDER is the command line builder function."
  (let (input)
    `(lambda (action)
      (cond
       ((stringp action)
        (setq input action)
        (funcall ,async action))
       (t (mapcar (lambda (string)
          (consult-gh--search-issues-format string input))
        (funcall ,async action)))
       ))))
#+end_src

***** group
#+begin_src emacs-lisp
(defun consult-gh--search-issues-group (cand transform)
"Grouping function for the list of items in `consult-gh-issue-list'. It groups issues by the status of the issue e.g. \"Open\"."
(setq my:test (last (remove " " (remove "" (string-split (substring-no-properties cand) "\s\s")))))
(let ((name (car (last (remove " " (remove "" (string-split (substring-no-properties cand) "\s\s")))))))
  (if transform (substring cand) name)))
#+end_src


***** builder
#+begin_src emacs-lisp
(defun consult-gh--search-issues-builder (input)
  "Build gh command line for searching issues from the input string"
  (pcase-let* ((consult-gh-args '("gh" "search" "issues"))
               (cmd (consult--build-args consult-gh-args))
               (`(,arg . ,opts) (consult--command-split input))
               (flags (append cmd opts)))
    (unless (or (member "-L" flags) (member "--limit" flags))
                        (setq opts (append opts (list "--limit" (format "%s" consult-gh-issue-maxnum)))))
    (pcase-let* ((`(,re . ,hl) (funcall consult--regexp-compiler arg 'emacs t)))
      (when re
        (cons (append cmd
                      (list (consult--join-regexps re 'emacs))
                      opts)
              hl)))))
#+end_src


***** async call
#+begin_src emacs-lisp
(defun consult-gh--search-issues (prompt builder &optional initial category)
  (consult--read
   (consult--async-command builder
     ;;(consult--async-map (lambda (x) (consult-gh--search-issues-format x)))
     (consult-gh--search-issues-transform builder)
     ;; (consult--async-highlight builder)
     ;; (consult--async-map (lambda (x) (consult-gh--async-highlight-match x)))
     ;;(consult--async-map (lambda (x) (consult-gh--async-format-repo x)))
     ;; ;;(consult--grep-format builder)
     ;;(consult--async-transform consult-gh--async-format-repo)
     )
   :prompt prompt
   :lookup (consult-gh--search-issues-lookup)
   :state (funcall #'consult-gh--search-issues-state)
   :initial (consult--async-split-initial initial)
   :group #'consult-gh--search-issues-group
   :add-history (consult--async-split-thingatpt 'symbol)
   :require-match t
   :category (make-symbol (concat "consult-gh-" category))
   :sort nil))

#+end_src

***** Interactive command (consult-gh-search-issues)
#+begin_src emacs-lisp
(defun consult-gh-search-issues (&optional initial repo)
  "Runs the interactive command in the minibuffer that queries the user for name of repos in the format `OWNER/REPO` e.g. armindarvish/consult-gh as well as a string as search term and returns the list of searhc matches for the string in issues of thae repos for further actions such as viewing in emacs or the browser.
The user can provide multiple repos by using the `consult-gh-crm-separator' similar to how `crm-separator' works in `completing-read-multiple'. Under the hood this command is using `consult' and particularly `consult--multi', which in turn runs macros of `completing-read' and passes the results to the GitHub command-line tool `gh` (e.g. by runing `gh search issues string --repo name-of-the-repo`) to search the issues for particular repositories and shows them back to the user.
It uses `consult-gh--make-source-from-search-issues' to create the list of items for consult and saves the history in `consult-gh--issues-history'. It also keep tracks of previously selected repos by the user in `consult-gh--known-repos-list' and offers them as possible entries in future runs of `consult-gh-search-issues'."
  (interactive)
  (if current-prefix-arg
    (let ((repo (or repo (substring-no-properties (car (consult-gh-search-repos repo))))))
      (consult-gh-issue-list (concat repo (consult--async-split-initial initial)))
      )
    (let ((consult-gh-args (append consult-gh-args '("search" "issues"))))
  (consult-gh--search-issues "Search Issues:  " #'consult-gh--search-issues-builder initial "issues"))))
#+end_src

*** find-file
***** lookup
#+begin_src emacs-lisp
(defun consult-gh--find-file-lookup ()
  (lambda (sel cands &rest args)
    (let* ((info (cdr (assoc sel cands)))
           (repo (plist-get info :repo)))
    (cons repo info))))
#+end_src

***** state
#+begin_src emacs-lisp
(defun consult-gh--find-file-state ()
  (lambda (action cand)
    (let* ((preview (consult--buffer-preview))
           )
      (if cand
          (pcase action
            ('preview
             )
            ('return
             cand)
             )))
      ))
#+end_src

***** format
#+begin_src emacs-lisp
(defun consult-gh--find-file-format (string input)
  (let* ((parts (string-split string "\t"))
         (repo (car parts))
         (user (car (string-split repo "\/")))
         (package (cadr (string-split repo "\/")))
         (description (cadr parts))
         (visibility (cadr (cdr parts)))
         (date (cadr (cdr (cdr parts))))
         (str (format "%s\s%s\s%s\s%s"
                  (consult-gh--set-string-width (concat (propertize user 'face 'consult-gh-user-face ) "/" (propertize package 'face 'consult-gh-package-face)) 40)
                  (propertize (consult-gh--set-string-width visibility 16) 'face 'consult-gh-visibility-face)
                  (propertize (consult-gh--set-string-width date 20) 'face 'consult-gh-date-face)
                  (propertize (consult-gh--set-string-width description 100) 'face 'consult-gh-description-face)))
         (str (consult-gh--highlight-match input str t))
         )
    (cons str (list :repo repo :user user :package package :date date :description description :visibility visibility))))

(defun consult-gh--find-file-transform (async builder)
  "Return ASYNC function highlighting grep match results.
BUILDER is the command line builder function."
  (let (input)
    `(lambda (action)
      (cond
       ((stringp action)
        (setq input action)
        (funcall ,async action))
       (t (mapcar (lambda (string)
          (consult-gh--search-repos-format string input))
        (funcall ,async action)))
       ))))
#+end_src


***** group
#+begin_src emacs-lisp
(defun consult-gh--find-file-group (cand transform)
"Grouping function for the list of items in `consult-gh-issue-list'. It groups issues by the status of the issue e.g. \"Open\"."
(let ((name (car (remove " " (remove "" (string-split (substring-no-properties cand) "\s\s"))))))
  (if transform (substring cand) name)))
#+end_src


***** builder
#+begin_src emacs-lisp
(defun consult-gh--api-get-json (arg)
"Makes a github api call to get response in json format by passing the arg (e.g. a github api url) to \"gh api -H Accept:application/vnd.github+json\" command."
  (consult-gh--call-process "api" "-H" "Accept: application/vnd.github+json" arg))

(defun consult-gh--files-get-trees (repo &optional branch)
"Gets a recursive git \"tree\" of repo and branch in json object format by using `consult-gh--api-get-json'. "
  (let ((branch (or branch "HEAD")))
  (consult-gh--api-get-json (concat "repos/" repo "/git/trees/" branch ":?recursive=1"))))

(defun consult-gh--files-table-to-list (table repo &optional branch)
"converts a hashtable containing git tree information of repo and branch to list of propertized texts formatted properly to be sent to  `consult-gh-find-file'."
   (let ((branch (or branch "HEAD")))
    (mapcar (lambda (item) (propertize (gethash :path item) ':repo repo ':branch branch ':url (gethash :url item) ':path (gethash :path item) ':size (gethash :size item))) table)))

(defun consult-gh--files-list-items (repo &optional branch)
"Fetches a list of files in repo and branch from GitHub. The format ois propertized text that include informaiton about the file generated by `consult-gh--files-table-to-list'. This list can be passed to `consult-gh-find-file'."
(let* ((branch (or branch "HEAD"))
       (response (consult-gh--files-get-trees repo branch))
       )
  (if (eq (car response) 0)
     (delete-dups (sort (consult-gh--files-table-to-list (consult-gh--api-json-to-hashtable (cadr response) :tree) repo branch) 'string<))
    (message (cadr response)))))

(defun consult-gh--files-nodirectory-items (repo &optional branch)
"Fetches a list of files in repo and branch from GitHub. The format ois propertized text that include informaiton about the file generated by `consult-gh--files-table-to-list'. This list can be passed to `consult-gh-find-file'."
(let* ((branch (or branch "HEAD"))
       (items (consult-gh--files-list-items repo branch))
       )
  (mapcar (lambda (item) (unless (get-text-property 0 :size item) (setq items (delete item items)))) items)
  items))



(defun consult-gh--find-file-builder (input branch)
  "Build gh command line for searching issues from the input string"
  (pcase-let* ((consult-gh-args '("gh" "api" "-H" "Accept:application/vnd.github+json"))
               (cmd (consult--build-args consult-gh-args))
               (`(,arg . ,opts) (consult--command-split (concat "repos/" input "/git/trees/" (format "%s" branch) ":?recursive=1")))
               (flags (append cmd opts)))
    ;; (unless (or (member "-L" flags) (member "--limit" flags))
    ;;                     (setq opts (append opts (list "--limit" (format "%s" consult-gh-issue-maxnum)))))
    (print (format "%s" (append cmd (list arg) opts)))
    (pcase-let* ((`(,re . ,hl) (funcall consult--regexp-compiler arg 'emacs t)))
      (when re
        (cons (append cmd
                      (list (consult--join-regexps re 'emacs))
                      opts)
              hl)))))
#+end_src

#+begin_src emacs-lisp :results verbatim drawer
(consult-gh--find-file-builder "armindarvish/consult-gh" "main")
#+end_src



***** async call
#+begin_src emacs-lisp
(defun consult-gh--find-file (prompt builder &optional initial category)
  (consult--read
   (consult--async-command builder
     ;;(consult-gh--find-files-transform builder)
     )
   :prompt prompt
   ;;:lookup (consult-gh--search-repos-lookup)
   ;;:state (funcall #'consult-gh--search-repos-state)
   :initial (consult--async-split-initial initial)
   ;;:group #'consult-gh--search-repos-group
   :add-history (consult--async-split-thingatpt 'symbol)
   :require-match t
   :category (make-symbol (concat "consult-gh-" category))
   :sort nil))

#+end_src

***** Interactive command (consult-gh-search-issues)
#+begin_src emacs-lisp
(defun consult-gh-find-file (&optional initial repo)
  "Runs the interactive command in the minibuffer that queries the user for name of repos in the format `OWNER/REPO` e.g. armindarvish/consult-gh as well as a string as search term and returns the list of searhc matches for the string in issues of thae repos for further actions such as viewing in emacs or the browser.
The user can provide multiple repos by using the `consult-gh-crm-separator' similar to how `crm-separator' works in `completing-read-multiple'. Under the hood this command is using `consult' and particularly `consult--multi', which in turn runs macros of `completing-read' and passes the results to the GitHub command-line tool `gh` (e.g. by runing `gh search issues string --repo name-of-the-repo`) to search the issues for particular repositories and shows them back to the user.
It uses `consult-gh--make-source-from-search-issues' to create the list of items for consult and saves the history in `consult-gh--issues-history'. It also keep tracks of previously selected repos by the user in `consult-gh--known-repos-list' and offers them as possible entries in future runs of `consult-gh-search-issues'."
  (interactive)
  (let* ((repo (or repo (substring-no-properties (car (consult-gh-search-repos repo)))))
           (branch (format "%s" (cdr (consult-gh--read-branch repo))))
           (consult-gh-tempdir (expand-file-name (make-temp-name "") consult-gh-tempdir))
           (candidates (consult--slow-operation "Collecting Contents ..." (consult-gh--make-source-from-files repo branch)))
           )
      (if (not (member nil (mapcar (lambda (cand) (plist-get cand :items)) candidates)))
          (progn
            (setq consult-gh--known-repos-list (append consult-gh--known-repos-list repos))
            (consult--multi candidates
                            :prompt "Select File: "
                            :require-match t
                            :sort t
                            :group #'consult-gh--files-group
                            :category 'consult-gh-files
                            :sort t
                            :preview-key consult-gh-preview-key
                            ))
        (message (concat "consult-gh: " (propertize "no contents matched your repo!" 'face 'warning))))))

#+end_src

** Tests

#+begin_src emacs-lisp
(consult-gh-search-issues "embark filter")
#+end_src

#+begin_src emacs-lisp
(consult-gh-search-repos "armindarvish/consult-gh")
#+end_src


#+begin_src emacs-lisp
(let ((current-prefix-arg 1))
(consult-gh-issue-list))
#+end_src

#+begin_src emacs-lisp
(let ((current-prefix-arg 1))
(consult-gh-search-issues))
#+end_src

#+begin_src emacs-lisp
(consult-gh-search-repos "armindarvish/consult-gh")
#+end_src
#+begin_src emacs-lisp
(cadr (consult-gh--read-branch "armindarvish/consult-gh"))
#+end_src

#+begin_src emacs-lisp
(consult-gh-find-file nil "armindarvish/consult-gh")
#+end_src
